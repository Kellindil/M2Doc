
h1(Overview). Overview

The M2Doc project provides Word document (.docx files) generation. It's based on document template and Ecore model. The M2Doc template is applied on one or mode variables to produce the generated document.

h1(Installation). Installation

The simplest way to start using M2Doc is to download an Eclipse modeling tools bundle from the "Eclipse packages page":https://www.eclipse.org/downloads/eclipse-packages/. Then you need to unpack it and launch the Eclipse executable. The next step is to "install":https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Ftasks%2Ftasks-127.htm M2Doc from one for the following "update sites":https://github.com/ObeoNetwork/M2Doc#download%2d%2dinstallation

h1(GenerateADocument). Generate a document

To generate a document you will need at least a template file (.docx file) and a generation configuration model (.genconf file). If you don't have the template you can read the "template authoring":index.html#Templateauthoring section. To create a generation model file you can read the "initialize generation":index.html#Initializinggeneration section.

h2(LaunchingGeneration). Launching generation

To launch the generation you can right click on the generation configuration model (.genconf file) or the Generation object and select the "Generate Documentation menu" has shown here:

!images/Generate Documentation menu.png(The Generate Documentation menu.)!

If you don't have the the generation model configuration file you can create it using the "initialize generation":index.html#Initializinggeneration section.

h2(InitializingGeneration). Initializing generation

To initialize a generation you will need a template file (.docx file). If you don't have the template you can read the "template authoring":index.html#Templateauthoring section.

Right click on the template file and select the "Initialize Documentation Configuration" menu:

!images/Initialize Documentation Configuration menu.png(The Initialize Documentation Configuration menu.)!

To edite the created generation model file you can use the "generation configuration editor":index.html#Generationconfigurationeditor.

h2(ValidatingATemplate). Validating a generation

To validate the configuration you can right click on the generation configuration model (.genconf file) or the Generation object and select the "Validate Documentation menu" has shown here:

!images/Validate Documentation menu.png(The Validate Documentation menu.)!

If you don't have the the generation model configuration file you can create it using the "initialize generation":index.html#Initializinggeneration section. If the validation succeed with no informations, warnings, or errors you will be promted. If something went wrong a .docx file with the name of the template and sufixed with "info", "warning", or "error" will be created. This new file contains details of the validation issues.

h2(GenerationConfigurationEditor). Generation configuration editor

The generation configuration model (.genconf file) references the template "URI":https://en.wikipedia.org/wiki/Uniform_Resource_Identifier and the result "URI":https://en.wikipedia.org/wiki/Uniform_Resource_Identifier. It also binds the variables defined using the "template editor":index.html#Templateeditor to the desired value. It can also contains a set of options to configure "specific services":index.html#Customconstructor.

!images/Generation configuration editor.png(The generation configuration editor.)!

In this example we reference the template named "template.docx" using a relative "URI":https://en.wikipedia.org/wiki/Uniform_Resource_Identifier and the result "URI":https://en.wikipedia.org/wiki/Uniform_Resource_Identifier is set to "template-generated.docx". Absolute "URI":https://en.wikipedia.org/wiki/Uniform_Resource_Identifier can be used as well.

The first table of the editor is used to bind variables. The first column is the variable name and the second column is the value. The value can be a reference an EMF model element or be a primitive type value. Two menus are accessible using right click on the variable table.

!images/Generation configuration editor - variables menu.png(The variable menu.)!

* Add variables will add all variables defined in the referenced template. To define variables you can use the "template editor":index.html#Templateeditor
* Remove definition will remove the selected bindings

An other menu can be useful to set EMF model values. It's the "Load Resource..." menu. It add the EMF elements of the selected resources to possible values of a variable.

The second table of the editor at the bottom can be used to set options for specific services. For instance if you use the "Sirius":https://eclipse.org/sirius/ integration an option should be set to define the Sirius session model. Three menus are accessible using right click on the option table.

!images/Generation configuration editor - options menu.png(The option menu.)!

* Add option will add an option (see "services with custom constructor":index.html#Customconstructor for more details)
* Initialize option will initialize an option (see "services with custom constructor":index.html#Customconstructor for more details)
* Delete will delete selected options 

h1(TemplateAuthoring). Template authoring

The template should be edited using your word document editor. M2Doc use Word fields to declare dynamic elements. In MS work you can make fields visible by using ALT+F9 and insert a new field by using CTRL+F9.

h2(Syntax). Syntax

All syntax elements of M2Doc should by placed into fields using ALT+F9 to show fields and CTRL+F9 to insert a field in MS Word. M2Doc is a imperative template language build on top of "AQL":https://www.eclipse.org/acceleo/documentation/aql.html for querying. The language support type inference and can be extented using "custom services":index.html#Providenewservices.

In the following table '{' and '}' denote a Word field. 

table{border:1px solid black}.
| Name |_. Syntax element |_. Description |
| Comment| {m:comment any text} | A simple comment, nothing is generated. |
| Static statement|anything that is not a M2Doc field| Generated as is |
| Query| {m:"AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } | The "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html is evaluated and its result is inserted in the generated document. "M2Doc services":index.html#Services and "provided services":index.html#Providenewservices can be used. Some "specific return types":index.html#Specialreturntypes will be interpreted by M2Doc. |
| Conditional | {m:if "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } ...then block... {m:elseif "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } ...else if block... {m:else} ...else block... {m:endif}| if the condition is true the "then block" is inserted in the generated document. if it's false and the "else if" contition is true the "else if block" is inserted. if all condition are false the "else block" is inserted. You can have zero or more "elseif blocks", zero or one "else block". All "AQL expressions":https://www.eclipse.org/acceleo/documentation/aql.html should evaluate to a Boolean. | 
| Repetition | {m:for variable &#124; "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } ...repetition block... {m:endfor} | Generates the "repetition block" for each value of the "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html. |
| Let | {m:let variable = "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } ...let block... {m:endlet} | Declare the variable named "variable" with the result of the "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html as value. The variable is accessible in the "let block". |
| Bookmark | {m:bookmark "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } ...bookmark block... {m:endbookmark} | Generates a bookmark with the result of the "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html as identifier and the "bookmark block" as content. |
| User Documentation | {m:userdoc "AQL expression":https://www.eclipse.org/acceleo/documentation/aql.html } ...user block... {m:enduserdoc} | generate a user content block in the resulting document. If the generated document exists and already has a use content with the same id the previous user content is preserved, otherwise the "userdoc block" is generated. | 

If you want examples of templates you can have a look at the nominal cases in "unit tests":https://github.com/ObeoNetwork/M2Doc/tree/master/tests/org.obeonetwork.m2doc.tests/resources.

h2(Services). Services

All "AQL services":https://www.eclipse.org/acceleo/documentation/aql.html#LanguageReference are available, on top that specific services are provided by M2Doc. See the following reference documentation. If you don't find your needs in this list, you can "provide services":index.html#Providenewservices.

p{color:red;bold}. TODO

h2(TemplateEditor). Template editor

The template editor can set M2Doc specific custom properties in your Word template. Those properties are used to define variables, EMF packages URI, and service imports. When editing a template you need to be in a Java or a plug-in project to be able to add services.

!images/Template editor.png(The template editor.)!

The first table at the top lists variables needed by the template. Each variable has a declared "type":https://www.eclipse.org/acceleo/documentation/aql.html#Typeliterals. This type is used to validate the template and to select a value in the "generation configuration editor":index.html#Generationconfigurationeditor. Three menus are accessible using right click on the variable table.

!images/Template editor - variables menu.png(The variables menu.)!

* Add missing variables will add all variables used in the template but not declared yet.
* Add variable will add a variable
* Delete variable will delete selected variables

The second table in the middle lists packages used in the template. It reference EMF EPackages used to type expressions in the template. Two menus are accessible using right click on the package table.

!images/Template editor - packages menu.png(The variables menu.)!

* Add will open the following dialog to add selected packages

!images/Package selection dialog.png(The package selection dialog.)!

* Delete selected packages

The last table at the bottom lists services used in the template. If you have created your "own services":index.html#Providenewservices you can add them here to be able to use them in the template. Three menus are accessible using right click on the service table.

!images/Template editor - services menu.png(The variables menu.)!

* Add will open a dialog where you can select a Java class

!images/Service selection dialog.png(The service selection dialog.)!

* Delete will remove the selection
* Select token will add/remove services according to the selected "tokens":index.html#Servicetoken in the dialog

!images/Service token selection dialog.png(The service token selection dialog.)!

h1(ProvideNewServices). Provide new services

You can extends M2Doc by adding services to your templates using the "template editor":index.html#Templateeditor. A service is a simple Java method with at least one parameter and a return value.

h2(ServiceClass). Service class

You have two cases for the containing class either it has a "default constructor":index.html#Defaultconstructor or a "constructor with a parameter":index.html#Customconstructor.

h3(DefaultConstructor). Default constructor

When the class has no explicit constructor or the constructor don't have any parameters. In this case you don't need any specific development except for your service method. You can have a look at "specific return types":index.html#Specialreturntypes if you want to insert images, table, etc... To use your services in your template simply add them in the "template editor":index.html#Templateeditor.

h3(CustomConstructor). Custom constructor

When there is an explicit constructor with at least a parameter M2Doc can't instantiate your class since there is no default constructor. You need to implement the "IServicesConfigurator":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/services/configurator/IServicesConfigurator.java interface. This interface link one or more options in the generation configuration to the service class in order to instantiate it. You need to use the org.obeonetwork.m2doc.ide.servicesConfigurator extension point to declare your implementation of "IServicesConfigurator":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/services/configurator/IServicesConfigurator.java. If you want to use your implementation in standalone you can register it programmatically using M2DocUtils.registerServicesConfigurator().

An example of implementation can be found in the "Sirius":https://eclipse.org/sirius/ integration plug-in see the class "SiriusConfigurationProvider":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc.sirius/src/org/obeonetwork/m2doc/sirius/providers/configuration/SiriusConfigurationProvider.java and the extension in the "plugin.xml":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc.sirius/plugin.xml.

h2(ServiceToken). Service token

The service token extension point org.obeonetwork.m2doc.ide.services.register can be used to reference a set of "service classes":index.html#Defaultconstructor using a token name. This token can be selected using "Select tokens" menu in the "template editor":index.html#Templateeditor.

h2(SpecialReturnTypes). Special return types

M2Doc evaluation engine convert any object to a string in order to insert it in the generated document. To add flexibility in the produced document we chose to expose some special types to service creators. Those types are "MElement":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/MElement.java allow to directly insert document artifacts:

* "MPagination":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/MPagination.java insert table of contents, new page, new paragraph, new column, and new text wrapping. 
* "MBookmark":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/MBookmark.java insert a new bookmark or a reference to a bookmark.
* "MHyperLink":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/MHyperLink.java insert a new link to an "URL":https://en.wikipedia.org/wiki/URL.
* "MImage":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/MImage.java insert a new image.
* "MTable":https://github.com/ObeoNetwork/M2Doc/blob/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/MTable.java insert a new table.

Default implementations are also provided by M2Doc in "this package":https://github.com/ObeoNetwork/M2Doc/tree/master/plugins/org.obeonetwork.m2doc/src/org/obeonetwork/m2doc/element/impl.

h1(TemplateTesting). Template testing

To simplify testing while developing M2Doc, a "JUnit":http://junit.org/junit4/ test suite has been implemented. It use a given folder as input and list each sub directory following a naming pattern as a test case. You can use the same test suite for your own tests. And example of the test suite implementation "QueryTests":https://github.com/ObeoNetwork/M2Doc/blob/master/tests/org.obeonetwork.m2doc.tests/src/org/obeonetwork/m2doc/tests/QueryTests.java with the folder "resources/query":https://github.com/ObeoNetwork/M2Doc/tree/master/tests/org.obeonetwork.m2doc.tests/resources/query.

h1(UsingM2DocProgrammatically). Using M2Doc programmatically

This section is for developers wanting to integrate M2Doc in there own project. It will show how to use main features of M2Doc programmatically. Since M2Doc use AQL for expressions it can be useful to have a look at "Using AQL programmatically":https://www.eclipse.org/acceleo/documentation/aql.html#UsingAQLprogrammatically.

h2(Parsing). Parsing

the following sample code shows how to load a template .docx file using M2Doc:

bc. final IQueryEnvironment queryEnvironment = org.eclipse.acceleo.query.runtime.Query.newEnvironmentWithDefaultServices(null);
final Map<String, String> options = ...; // can be empty
M2DocUtils.prepareEnvironmentServices(queryEnvironment, templateURI, options); // delegate to IServicesConfigurator
final IClassProvider classProvider = new ClassProvider(this.getClass().getClassLoader()); // use M2DocPlugin.getClassProvider() when running inside Eclipse
try (DocumentTemplate template = M2DocUtils.parse(templateURI, queryEnvironment, classProvider)) {
  // use the template
}

h2(Validation). Validation

The validation is optional:

bc. final ValidationMessageLevel validationLevel = M2DocUtils.validate(template, queryEnvironment);
if (validationLevel != ValidationMessageLevel.OK) {
  final URI validationResulrURI = ...; // some place to serialize the result of the validation
  M2DocUtils.serializeValidatedDocumentTemplate(documentTemplate, validationResulrURI);
}

h2(Generation). Generation

The generation will produce the final document where M2Doc template is evaluated against the given variables. There are two level of API for the generation: direclty from the DocumentTemplate or from the Generation.

h3(CoreGenerationAPI). Core generation API

bc. final Map<String, Object> variables = ...; // your variables and values
final URI outputURI = ...; // some place to serialize the result of the generation
M2DocUtils.generate(template, queryEnvironment, variables, outputURI, monitor);

h3(GenerationConfigurationAPI). Generation configuration API

bc. final Generation generation = ...; // load from a serialized EMF model or create in memory
final IClassProvider classProvider = new ClassProvider(this.getClass().getClassLoader()); // use M2DocPlugin.getClassProvider() when running inside Eclipse
GenconfUtils.generate(generation, classProvider, monitor);
